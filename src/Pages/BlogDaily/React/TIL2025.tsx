import React from 'react'

const TIL0225 = () => {
    return (
      <div className='BlogDaily'>
                  <h3>객체 지향 프로그래밍(OOP)</h3>
                  <p> 사람이 세계를 보고 이해하는 방법과 매우 흡사.<br/>
                      자바스크립트 사용하는 사람들이 이렇게 하는게 어떨까? 해서 만들어짐.</p>
                  <h4>객체 지향 프로그램이란</h4>
                  하나의 모델이 되는 청사진을 만들어 ... class<br/>
                  그 청사진을 바탕으로 한 객체(object)를 만드는... instance<br/>
                  프로그래밍 패턴
  
                  <h4>구조</h4>
                  <p>구조 익히기. 나중에 배울 솔리디티와 비슷.</p>
                          <ul>class Car constructor함수(브랜드, 이름, 색) </ul>
                  constructor라는 함수가 인자를 받고 초기 세팅으로 처음 딱 한 번 실행됨. const로 변수 선언 안 해도 됨.
                  
                  <p>new 키워드를 통해 클래스의 인스턴스를 만들어낼 수 있음.<br/>
                      <ul>let avante = new Car('hyundai', 'avante', 'black'); </ul>
                  여기서 avante가 인스턴스. 각 인스턴스는 Car 라는 클래스의 고유한 속성과 메서드를 가짐.
                  </p>
  
                  <h4>속성과 메서드</h4>
                  예를 들어 자동차의 속성은 브랜드, 차 이름, 색상, 현재 연료 상태, 최고 속력 등이 있음.<br/>
                  메서드는 연료 주입, 속력 설정, 운전 등 자동차의 기능을 말함. 쉽게 말해 메서드는 객체에 딸린 함수임 (function이 따로 필요 없음).
  
                  <h4>OOP 주요 개념</h4>
                  <ul>
                      <li>캡슐화 - 필요한 정보만 보여주는 것 </li>
                      <ul>
                          <li>데이터(속성)과 기능(메서드)을 하나의 객체 안에 넣어서 묶는 것. 즉 데이터와 기능이 느슨하게 결합되는 것.</li>
                          <li>느슨한 결합은 코드 실행 순서에 따라 절차적으로 코드를 작성하는 것이 아니라, 코드가 상징하는 실제 모습과 닮게 코드를 모아 결합하는 것을 의미함.</li>
                          <li>예: 마우스 구동. 마우스 상태를 '속성'으로 정하고 클릭, 이동을 '메서드'로 정하는 것.</li>
                          <li>구현은 숨기고 동작은 노출시키는 은닉화 특징도 포함.</li>
                          <li>언제든 구현을 수정할 수 있어 느슨한 결합에 유리</li>
                      </ul>
                      <li>추상화 - 복잡한 것은 감추고 필요한 것만 제공</li>
                      <ul>
                          <li>내부 구현은 아주 복잡한데 실제로 노출되는 부분은 단순하게 만든다는 개념.</li>
                          <li>추상화를 통해 인터페이스가 단순해짐.</li>
                          <li>예: 전화기</li>
                          <li>캡슐화가 코드나 데이터의 은닉에 포커스가 맞춰져있다면,
                              추상화는 클래스를 사용하는 사람이 필요하지 않은 메서드 등을 노출시키지 않고 단순한 이름으로 정의하는 것에 포커스가 맞춰져 있음.</li>
                      </ul>
                      <li>상속 - 재사용</li>
                      <ul>
                          <li>부모 클래스 특징을 자식 클래스가 물려받는 것.</li>
                      </ul>
                      <li>다형성- 같은 동작, 다른 결과</li>
                      <ul>
                          <li>짖어봐! 하면 꽥! 멍멍! 야옹! 하는 것.</li>
                      </ul>
                  </ul>
                  <p>한 마디로 캡슐화는 숨기고, 추상화는 단순화하고, 상속은 물려주고, 다형성은 다르게 동작하는 것.<br/>
                      결국 OOP는 사람이 세계를 보고 이해하는 방법을 흉내낸 방법론.<br/>
                      OOP의 특성을 이해하고 잘 사용하면 좋은 설계 할 수 있음.</p>
  
                  <h4>객체 지향 언어들의 차이점</h4>
                  <p>
                      자바스크립트는 프로토타입 기반 언어이고 객체지향 언어로 쓰기 어렵다.
                  </p>
                  <ul>
                      <li>은닉화(private 키워드)의 한계</li>
                      <li>추상화(interface 키워드) 기능의 부재</li>
                  </ul>
  
   </div>
    );
  };

export default TIL0225 